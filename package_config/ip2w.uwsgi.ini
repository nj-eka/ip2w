[app]
; app global settings

lang = $LANG
;; Usage:
; ru | ru_RU.UTF-8  (first two characters for lang)
working_dir = $(IP2W_WORKING_DIR)
; path_to_dir | $IP2W_WORKING_DIR | $PWD
;; Used in:
; [uwsgi]: chdir = %(working_dir)
log_dir = $(IP2W_LOG_DIR)
; path_to_dir | $IP2W_LOG_DIR
; [app.logging]: base_config_filename = ${app:log_dir}/ip2w_app.log
; [uwsgi]: logto2 = %(log_dir)/ip2w.uwsgi.log

c_cfg = $(IP2W_CACHE_CFG_ID)
; string id (e.g. ip2w_cfg) | $IP2W_CACHE_CFG_ID
; [uwsgi]: cache2 = name=%(c_cfg),items=10

c_i2g = ip2w_i2g
; [app.api.ipinfo]: cache_id = ${app:c_i2g}
; [uwsgi]: cache2 = name=%(c_i2g),items=1000,purge_lru=true

c_g2w = ip2w_g2w
; [app.api.weather]: cache_id = ${app:c_g2w}
; [app.api.onecall]: cache_id = ${app:c_g2w}
; [uwsgi]: cache2 = name=%(c_g2w),items=100,expires=%(c_g2w_expires)

c_g2w_expires = 180
; [app.api.weather]: cache_expires = ${app:c_g2w_expires}
; [app.api.onecall]: cache_expires = ${app:c_g2w_expires}
; [uwsgi]: cache2 = name=%(c_g2w),items=100,expires=%(c_g2w_expires)

app_enc_html_default = iso-8859-1
; => APP_ENC_HTML_DEFAULT
app_http_date_format = %a, %d %b %Y %H:%M:%S GMT
; => APP_HTTP_DATE_FORMAT
app_default_method = weather
; => APP_DEFAULT_METHOD
app_server_name = ip2w server
; => APP_SERVER_NAME

###################################################
[app.logging]
; basic configuration params for logging system: logging.basicConfig(...)
base_config_format = [%(asctime)s] %(levelname).1s %(message)s
;base_config_datefmt = %y.%m.%d %h:%m:%s
base_config_level = DEBUG 
; DEBUG | INFO | ERROR | NOTSET
base_config_filename = ${app:log_dir}/ip2w_app.log
;base_config_filename = $IP2W_WORKING_DIR/ip2w_app.log
base_config_filemode = w
; w | a

###################################################
[app.api.ipinfo]
cache_id = ${app:c_i2g}
; => METHOD_CACHE_ID
; cache_expires = 0
; LRU don't use cache_expires 

; https://github.com/ipinfo/python
key = $IPINFO_KEY
request_time_out = 4

###################################################
[app.api.weather]
cache_id = ${app:c_g2w}
; = METHOD_CACHE_ID
cache_expires = ${app:c_g2w_expires}
; = METHOD_CACHE_EXPIRES 
request_url_path = https://api.openweathermap.org/data/2.5/weather
; https://openweathermap.org/current#geo
; By geographic coordinates
; Parameters
; lat, lon	required	Geographical coordinates (latitude, longitude)
; appid	required	Your unique API key 
; mode	optional	Response format. Possible values are xml and html. If you don't use the mode parameter format is JSON by default.
; units	optional	Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default. 
; lang	optional	You can use this parameter to get the output in your language.
request_param_appid = $IP2W_KEY
request_param_mode = json
request_param_units = metric
request_param_lang = ${app:lang}
; ${app:lang} | $(HTTP_ACCEPT_LANGUAGE) - may be absent | ru | ru_RU.UTF-8  (in any case only first two characters is used for lang)  
; todo add support OR schema: $($(HTTP_ACCEPT_LANGUAGE) || $(LANG) || ru)

; ip, lat, lon can be also used explicitly
; request_param_ip = ${REMOTE_ADDR}
; request_param_lat = 33.333
; request_param_lon = 55.555

request_headers = {"Connection": "close"}
; add some extra headers to request if needed

request_time_out = 80

response_headers_list_relay = Content-Type, Content-Length
; relay listed headers from response as is
; Usage examples:
; response_headers_list_relay = Server, Date, Content-Type, Content-Length, Connection
; response_headers_list_relay = *

###################################################
[app.api.onecall]
cache_id = ${app:c_g2w}
; = METHOD_CACHE_ID
cache_expires = ${app:c_g2w_expires}
; = METHOD_CACHE_EXPIRES 
request_url_path = https://api.openweathermap.org/data/2.5/onecall
; https://openweathermap.org/api/one-call-api
; https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}
; Parameters
; lat, lon	required	Geographical coordinates (latitude, longitude)
; appid	required	Your unique API key
; exclude	optional	By using this parameter you can exclude some parts of the weather data from the API response. 
; It should be a comma-delimited list (without spaces).
; Available values:
; current | minutely | hourly | daily | alerts
; units	optional	Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
; lang	optional	You can use the lang parameter to get the output in your language.
request_param_appid = $IP2W_KEY
request_param_mode = json
request_param_units = metric
request_param_lang = ${app:lang}
request_param_exclude = minutely,daily
; ip, lat, lon can be also used
; request_param_ip = ${REMOTE_ADDR}
; request_param_lat = 33.333
; request_param_lon = 55.555

request_headers = {"Connection": "close"}

request_time_out = 8

response_headers_list_relay = Server, Date, Content-Type, Content-Length, Connection

###################################################
[uwsgi]
; https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html
; https://webdevblog.ru/sovety-po-nastrojke-uwsgi-v-proizvodstvennoj-srede/
ini = :app

uid = $(IP2W_USER)
gid = $(IP2W_GROUP)

chdir = %(working_dir)
; %d | $(IP2W_WORKING_DIR)

module = ip2w:application
virtualenv = /var/pyvenvs/ip2w
single-interpreter = true
need-app = true

master = true
processes = 5
vacuum = true
die-on-term = true
harakiri = 30
no-orphans = true

socket = $(IP2W_UWSGI_HOST):$(IP2W_UWSGI_PORT)
buffer-size = 65535
; socket = /run/ip2w/uwsgi_app.sock
; chown-socket = %(ip2w_user):%(ip2w_group)
; chmod-socket = 660

;https://uwsgi-docs.readthedocs.io/en/latest/Management.html
safe-pidfile2 = $(IP2W_RUN_DIR)/%n.pid

touch-reload = %p

cache2 = name=%(c_cfg),items=10
;cache2 = name=$(IP2W_CACHE_CFG_ID),items=10
cache2 = name=%(c_i2g),items=1000,purge_lru=true
cache2 = name=%(c_g2w),items=100,expires=%(c_g2w_expires)

; https://uwsgi-docs.readthedocs.io/en/latest/LogFormat.html?highlight=log#uwsgi-default-logging
;disable-logging = true
; log-4xx = true
; log-5xx = true
logto2 = %(log_dir)/ip2w.uwsgi.log
log-format = [pid: %(pid)|app: -|req: -/-] %(addr) (%(user)) {%(vars) vars in %(pktsize) bytes} [%(ctime)] %(method) %(uri) => generated %(rsize) bytes in %(msecs) msecs (%(proto) %(status)) %(headers) headers in %(hsize) bytes (%(switches) switches on core %(core))
; log-format-strftime = 
; logfile-chown
; logfile-chmod
memory-report = true

; ###################################################
; [wsgi.env]
; this section added at runtime
; sample content - see below
; CONTENT_LENGTH:
; CONTENT_TYPE:
; DOCUMENT_ROOT: /etc/nginx/html
; HTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
; HTTP_ACCEPT_ENCODING: gzip, deflate
; HTTP_ACCEPT_LANGUAGE: en-US,en;q=0.9,ru;q=0.8
; HTTP_CACHE_CONTROL: max-age=0
; HTTP_CONNECTION: keep-alive
; HTTP_HOST: 0.0.0.0
; HTTP_UPGRADE_INSECURE_REQUESTS: 1
; HTTP_USER_AGENT: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36
; PATH_INFO: /
; QUERY_STRING:
; REMOTE_ADDR: 127.0.0.1
; REMOTE_PORT: 41852
; REQUEST_METHOD: GET
; REQUEST_SCHEME: http
; REQUEST_URI: /
; SERVER_NAME: 0.0.0.0
; SERVER_PORT: 80
; SERVER_PROTOCOL: HTTP/1.1
; uwsgi.node: b'...'
; uwsgi.version: b'2.0.19.1'
; wsgi.errors: <_io.TextIOWrapper name=2 mode='w' encoding='UTF-8'>
; wsgi.file_wrapper: <built-in function uwsgi_sendfile>
; wsgi.input: <uwsgi._Input object at 0x7f884368e490>
; wsgi.multiprocess: True
; wsgi.multithread: False
; wsgi.run_once: False
; wsgi.url_scheme: http
; wsgi.version: (1, 0)
